From 18ba760179f793a154871a0167e2eda44afbe25b Mon Sep 17 00:00:00 2001
From: Hyundo Lee <54927573+hdlee27@users.noreply.github.com>
Date: Fri, 4 Sep 2020 14:58:28 +0900
Subject: [PATCH] Add function to encode json number when "sprintf" not
 support float

modified by refferring to following patch
: https://github.com/espressif/ESP8266_RTOS_SDK/commit/e5df03c2774748db89fdee7e67f8aa0010b22d3d
Signed-off-by: Hyundo Lee <54927573+hdlee27@users.noreply.github.com>
---
 cJSON.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 59 insertions(+), 1 deletion(-)

diff --git a/cJSON.c b/cJSON.c
index 60b72c0..91f9ac1 100644
--- a/cJSON.c
+++ b/cJSON.c
@@ -55,6 +55,14 @@
 #pragma GCC visibility pop
 #endif

+#ifndef CJSON_SPRINTF_FLOAT
+#define CJSON_SPRINTF_FLOAT 0
+#endif
+
+#if !CJSON_SPRINTF_FLOAT
+#include <assert.h>
+#endif
+
 #include "cJSON.h"

 /* define our own boolean type */
@@ -503,6 +511,7 @@ static cJSON_bool print_number(const cJSON * const item, printbuffer * const out
     }
     else
     {
+#if CJSON_SPRINTF_FLOAT
         /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
         length = sprintf((char*)number_buffer, "%1.15g", d);

@@ -512,8 +521,57 @@ static cJSON_bool print_number(const cJSON * const item, printbuffer * const out
             /* If not, print with 17 decimal places of precision */
             length = sprintf((char*)number_buffer, "%1.17g", d);
         }
-    }
+#else
+        long long d64 = (long long)d;
+        long d32 = (long)d;
+
+        /**
+         * Check if 32-bit type data is overflow.
+         */
+        assert(d32 == d64 && "Library newlib of nano mode does not support double or long-long format, please enable newlib normal mode.");
+
+        length = sprintf((char*)number_buffer, "%ld", d32);
+
+        if ((double)d32 != d) {
+            size_t precision = 14;
+            unsigned char *pbuf = number_buffer;
+
+            if (d < 0.0) {
+                d = (double)d32 - d + 0.00000000000001;
+            } else {
+                d = d - (double)d32;
+            }
+
+            pbuf = &number_buffer[length];
+            *pbuf++ = '.';
+            length++;

+            while (d > 0.0 && precision--) {
+                d *= 10.0;
+                unsigned char tmp = (unsigned char)d;
+
+                *pbuf++ = tmp + '0';
+                length++;
+
+                d -= (double)tmp;
+            }
+
+            pbuf = &number_buffer[length - 1];
+
+            while (*pbuf == '0') {
+                pbuf--;
+                length--;
+            }
+
+            if (*pbuf == '.') {
+                pbuf--;
+                length--;
+            }
+
+            *++pbuf = 0;
+        }
+#endif
+    }
     /* sprintf failed or buffer overrun occurred */
     if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
     {
-- 
2.7.4

