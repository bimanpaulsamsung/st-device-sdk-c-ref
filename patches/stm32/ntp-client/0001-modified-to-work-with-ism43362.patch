From 07361cd1650d00f0885d048bed5484f298a8a85b Mon Sep 17 00:00:00 2001
From: Biman Paul <biman.paul@samsung.com>
Date: Wed, 26 Aug 2020 17:54:26 +0530
Subject: [PATCH] modified to work with ism43362

---
 NTPClient.cpp | 70 ++++++++++++++++++++++++++++-----------------------
 NTPClient.h   |  6 ++---
 2 files changed, 40 insertions(+), 36 deletions(-)

diff --git a/NTPClient.cpp b/NTPClient.cpp
index 1f62f7f..57dc4b0 100644
--- a/NTPClient.cpp
+++ b/NTPClient.cpp
@@ -16,9 +16,13 @@
 
 #include "ntp-client/NTPClient.h"
 #include "mbed.h"
+#include "wifi.h"
 
-NTPClient::NTPClient(NetworkInterface *interface)
-    : iface(interface), nist_server_address(NTP_DEFULT_NIST_SERVER_ADDRESS), nist_server_port(NTP_DEFULT_NIST_SERVER_PORT) {
+#define WIFI_WRITE_TIMEOUT 10000
+#define WIFI_READ_TIMEOUT  10000
+
+NTPClient::NTPClient()
+    : nist_server_address(NTP_DEFULT_NIST_SERVER_ADDRESS), nist_server_port(NTP_DEFULT_NIST_SERVER_PORT) {
 }
 
 void NTPClient::set_server(const char* server, int port) {
@@ -26,59 +30,61 @@ void NTPClient::set_server(const char* server, int port) {
     nist_server_port = port;
 }
 
-time_t NTPClient::get_timestamp(int timeout) {
+time_t NTPClient::get_timestamp() {
     const time_t TIME1970 = (time_t)2208988800UL;
     int ntp_send_values[12] = {0};
-    int ntp_recv_values[12] = {0};
-
-    SocketAddress nist;
-
-    if (iface) {
-        int ret_gethostbyname = iface->gethostbyname(nist_server_address, &nist);
-
-        if (ret_gethostbyname < 0) {
-            // Network error on DNS lookup
-            return ret_gethostbyname;
-        }
-
-        nist.set_port(nist_server_port);
+    uint32_t ntp_recv_values[12] = {0};
+    uint8_t ntp_timesec[4] = {0};
+    uint8_t remoteip[4] = {0,};
+    uint8_t socket = 0;
+    int wifi_code;
+    uint16_t ret;
+    uint16_t n;
+
+	if (WIFI_GetHostAddress((char *)nist_server_address, remoteip) != WIFI_STATUS_OK) {
+		printf("ERROR: DNS Resolution failed\n");
+	}
 
         memset(ntp_send_values, 0x00, sizeof(ntp_send_values));
         ntp_send_values[0] = '\x1b';
 
         memset(ntp_recv_values, 0x00, sizeof(ntp_recv_values));
 
-        UDPSocket sock;
-        sock.open(iface);
-        sock.set_timeout(timeout);
 
-        sock.sendto(nist, (void*)ntp_send_values, sizeof(ntp_send_values));
+        if (WIFI_OpenClientConnection(socket, WIFI_UDP_PROTOCOL, "ntp",
+        		remoteip, nist_server_port, 1111) != WIFI_STATUS_OK) {
+        	printf("ERROR: UDP Socket for NTP Failed\n");
+        	return 0;
+        }
 
-        SocketAddress source;
-        const int n = sock.recvfrom(&source, (void*)ntp_recv_values, sizeof(ntp_recv_values));
+        printf("SENDING...\n");
+        wifi_code = WIFI_SendData(socket, (uint8_t *)ntp_send_values, sizeof(ntp_send_values), &ret, WIFI_WRITE_TIMEOUT);
+        printf("RECEIVING...\n");
+        wifi_code = WIFI_ReceiveData(socket, (uint8_t *)ntp_recv_values, sizeof(ntp_recv_values), &n, WIFI_READ_TIMEOUT);
+        printf("RECEIVED...\n");
+        if (WIFI_CloseClientConnection(socket) != WIFI_STATUS_OK) {
+			printf("ERROR: UDP Socket Close for NTP Failed\n");
+		}
 
         if (n > 10) {
+        	memcpy(ntp_timesec, ntp_recv_values + 10, 4);
+
+        	printf("TIME STAMP NTP: %02x %02x %02x %02x\n", ntp_timesec[0], ntp_timesec[1], ntp_timesec[2], ntp_timesec[3]);
+        	uint32_t epochtime = ntohl(ntp_recv_values[10]);
+        	printf("SECONDS NTP: %u, 0x%x\n", epochtime, epochtime);
+        	printf("SECONDS EPOCH: %u, 0x%x\n", epochtime- TIME1970, epochtime- TIME1970);
             return ntohl(ntp_recv_values[10]) - TIME1970;
 
         } else {
             if (n < 0) {
                 // Network error
-                return n;
+                return 0;
 
             } else {
                 // No or partial data returned
                 return -1;
             }
         }
-
-    } else {
-        // No network interface
-        return -2;
-    }
-}
-
-void NTPClient::network(NetworkInterface *interface) {
-    iface = interface;
 }
 
 uint32_t NTPClient::ntohl(uint32_t x) {
diff --git a/NTPClient.h b/NTPClient.h
index 8f755f5..7fb167e 100644
--- a/NTPClient.h
+++ b/NTPClient.h
@@ -21,13 +21,11 @@
 
 class NTPClient {
     public:
-        explicit NTPClient(NetworkInterface *interface = NULL);
+        explicit NTPClient();
         void set_server(const char* server, int port);
-        time_t get_timestamp(int timeout = 15000);
-        void network(NetworkInterface *interface);
+        time_t get_timestamp();
 
     private:
-        NetworkInterface *iface;
         const char* nist_server_address;
         int nist_server_port;
 
-- 
2.25.1

